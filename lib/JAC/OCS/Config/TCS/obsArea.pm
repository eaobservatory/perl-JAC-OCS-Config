package JAC::OCS::Config::TCS::obsArea;

=head1 NAME

JAC::OCS::Config::TCS::obsArea - Parse and modify TCS observing area

=head1 SYNOPSIS

  use JAC::OCS::Config::TCS::obsArea;

  $cfg = new JAC::OCS::Config::TCS::obsArea( File => 'obsArea.ent');
  $cfg = new JAC::OCS::Config::TCS::obsArea( XML => $xml );
  $cfg = new JAC::OCS::Config::TCS::obsArea( DOM => $dom );

  $pa       = $cfg->posang;
  @offsets  = $cfg->offsets;


=head1 DESCRIPTION

This class can be used to parse and modify the telescope observing area
XML.

=cut

use 5.006;
use strict;
use Carp;
use warnings;
use XML::LibXML;
use Data::Dumper;

use JAC::OCS::Config::Error;

use base qw/ JAC::OCS::Config::CfgBase /;

use vars qw/ $VERSION /;

$VERSION = sprintf("%d.%03d", q$Revision$ =~ /(\d+)\.(\d+)/);

=head1 METHODS

=head2 Constructor

=over 4

=item B<new>

Create a new obsArea configuration object. An object can be created from
a file name on disk, a chunk of XML in a string or a previously created
DOM tree generated by C<XML::LibXML> (i.e. A C<XML::LibXML::Element>).

  $cfg = new JAC::OCS::Config::obsArea( File => $file );
  $cfg = new JAC::OCS::Config::obsArea( XML => $xml );
  $cfg = new JAC::OCS::Config::obsArea( DOM => $dom );

The constructor will locate the obsArea configuration in 
a << obsArea >> element. It will not attempt to verify that it has
a << TCS_CONFIG >> element as parent.

The method will die if no arguments are supplied.

=cut

sub new {
  my $self = shift;

  # Now call base class with all the supplied options
  return $self->SUPER::new( @_ );
}

=head2 Accessor Methods

=over 4

=item B<posang>

The global position angle associated with this observing area.

 $tag = $cfg->posang;
 $cfg->posang( 52.4 );

=cut

# Should be an Angle object of some description.

sub posang {
  my $self = shift;
  if (@_) {
    $self->{POSANG} = shift;
  }
  return $self->{POSANG};
}

=back

=head2 Class Methods

=over 4

=item B<getRootElementName>

Return the name of the element that should be the root
node of the XML tree corresponding to the TCS obsArea config.

 @names = $tcs->getRootElementName;

=cut

sub getRootElementName {
  return( "obsArea" );
}

=back

=begin __PRIVATE_METHODS__

=head2 Private Methods

=over 4

=item B<_process_dom>

Using the C<_rootnode> node referring to the top of the TCS XML,
process the DOM tree and extract all the coordinate information.

 $self->_process_dom;

Populates the object with the extracted results.

=cut

sub _process_dom {
  my $self = shift;

  # parse obsArea
#  $self->_find_base_posn();

  return;
}

=end __PRIVATE_METHODS__

=head1 HISTORY

This code was originally part of the C<OMP::MSB> class and was then
extracted into a separate C<TOML::TCS> module. During work on the new
ACSIS translator it was felt that a Config namespace was more correct
and so the C<TOML> namespace was deprecated.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

Copyright 2002-2004 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

1;
