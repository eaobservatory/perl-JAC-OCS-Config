package JAC::OCS::Config::ACSIS::LineList;

=head1 NAME

JAC::OCS::Config::ACSIS - Parse and modify OCS ACSIS Line List configurations

=head1 SYNOPSIS

  use JAC::OCS::Config::ACSIS::LineList;

  $cfg = new JAC::OCS::Config::ACSIS::LineList( DOM => $dom);

=head1 DESCRIPTION

This class can be used to parse and modify the ACSIS line list configuration
information present in the C<line_list> element of an OCS configuration.

=cut

use 5.006;
use strict;
use Carp;
use warnings;
use XML::LibXML;

use JAC::OCS::Config::Error qw| :try |;
use JAC::OCS::Config::Units;

use JAC::OCS::Config::XMLHelper qw(
				   find_children
				   find_attr
				   indent_xml_string
				   get_this_pcdata
				  );

use base qw/ JAC::OCS::Config::CfgBase /;

use vars qw/ $VERSION /;

$VERSION = sprintf("%d.%03d", q$Revision$ =~ /(\d+)\.(\d+)/);

=head1 METHODS

=head2 Constructor

=over 4

=item B<new>

Create a new LineList configuration object. An object can be created from
a file name on disk, a chunk of XML in a string or a previously created
DOM tree generated by C<XML::LibXML> (i.e. A C<XML::LibXML::Element>).

  $cfg = new JAC::OCS::Config::ACSIS::LineList( File => $file );
  $cfg = new JAC::OCS::Config::ACSIS::LineList( XML => $xml );
  $cfg = new JAC::OCS::Config::ACSIS::LineList( DOM => $dom );

The method will die if no arguments are supplied.

=cut

sub new {
  my $self = shift;

  # Now call base class with all the supplied options +
  # extra initialiser
  return $self->SUPER::new( @_, 
			    $JAC::OCS::Config::CfgBase::INITKEY => { 
								    LineList => {},
								   }
			  );
}

=back

=head2 Accessor Methods

=over 4

=item B<lines>

Return a hash with keys corresponding to the line identifications
and values the corresponding rest frequency of the line in Hz.

  %lines = $l->lines();
  $l->lines( %lines );

The keys are of the form "CO2-1" and include the molecule and transition.
Use the class method C<moltrans2key> to generate a key in a suitable form.

Note that the accessor method can only be fully overwritten, not partially
tweaked.

=cut

sub lines {
  my $self = shift;
  if (@_) {
    %{$self->{LineList}} = @_;
  }
  return %{$self->{LineList}};
}

=item B<stringify>

Create XML representation of object.

=cut

sub stringify {
  my $self = shift;
  my %args = @_;

  my $xml = '';
  $xml .= "<line_list>\n";

  # Version declaration
  $xml .= $self->_introductory_xml();

  my %lines = $self->lines;

  # current unit object
  my $unit = new JAC::OCS::Config::Units( "Hz" );

  # loop over all keys
  for my $id (keys %lines) {
    $xml .= "<rest_frequency id=\"$id\" units=\"GHz\">\n";
    $xml .= ($lines{$id} * $unit->mult("G")) ."\n";
    $xml .= "</rest_frequency>\n";
  }

  $xml .= "</line_list>\n";
  return ($args{NOINDENT} ? $xml : indent_xml_string( $xml ));
}

=back

=head2 Class Methods

=over 4

=item B<getRootElementName>

Return the name of the _CONFIG element that should be the root
node of the XML tree corresponding to the ACSIS line list config.

 @names = $h->getRootElementName;

=cut

sub getRootElementName {
  return( "line_list" );
}

=item B<moltrans2key>

Convert a molecular species and transtion into a key suitable for storing
in this object C<lines> hash.

 $key = $class->moltrans2key( $mol, $trans );

=cut

sub moltrans2key {
  my $class = shift;
  my ($mol, $trans) = @_;
  $trans = '' if $mol eq $trans; # No Line == No Line
  $trans =~ s/\s+//g;
  $mol =~ s/\s+//g;
  $mol = uc($mol);
  return ($mol . $trans);
}

=back

=begin __PRIVATE_METHODS__

=head2 Private Methods

=over 4

=item B<_process_dom>

Using the C<_rootnode> node referring to the top of the Instrument XML,
process the DOM tree and extract all the coordinate information.

 $self->_process_dom;

Populates the object with the extracted results.

=cut

sub _process_dom {
  my $self = shift;

  # Find all the header items
  my $el = $self->_rootnode;

  # need to get all the rest_frequency elements.
  my @rfreq = find_children( $el, "rest_frequency", min => 1 );

  my %lines;
  for my $rf (@rfreq) {
    my %attr = find_attr( $rf, "id", "units" );
    my $unit = new JAC::OCS::Config::Units( $attr{units} );
    my $freq = get_this_pcdata( $rf );
    next unless defined $freq;

    # convert to Hertz
    $freq *= $unit->mult( '' );

    $lines{$attr{id}} = $freq;
  }

  # store the lines
  $self->lines( %lines );

}

=back

=end __PRIVATE_METHODS__

=head1 XML SPECIFICATION

The ACSIS XML configuration specification is documented in
OCS/ICD/005 with a DTD available at
http://www.jach.hawaii.edu/JACdocs/JCMT/OCS/ICD/005/acsis.dtd.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

Copyright 2004 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

1;
