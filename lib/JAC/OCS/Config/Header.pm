package JAC::OCS::Config::Header;

=head1 NAME

JAC::OCS::Config::Header - Parse and modify OCS HEADER configurations

=head1 SYNOPSIS

  use JAC::OCS::Config::Header;

  $cfg = new JAC::OCS::Config::Header( File => 'header.ent');

=head1 DESCRIPTION

This class can be used to parse and modify the header configuration
information present in the HEADER_CONFIG element of an OCS configuration.

=cut

use 5.006;
use strict;
use Carp;
use warnings;
use XML::LibXML;

use JAC::OCS::Config::Error qw| :try |;

use JAC::OCS::Config::XMLHelper;
use JAC::OCS::Config::XMLHelper qw(
				   find_children
				   find_attr
				   indent_xml_string
				  );

use JAC::OCS::Config::Header::Item;

use base qw/ JAC::OCS::Config::CfgBase /;

use vars qw/ $VERSION /;

$VERSION = sprintf("%d.%03d", q$Revision$ =~ /(\d+)\.(\d+)/);

=head1 METHODS

=head2 Constructor

=over 4

=item B<new>

Create a new HEADER configuration object. An object can be created from
a file name on disk, a chunk of XML in a string or a previously created
DOM tree generated by C<XML::LibXML> (i.e. A C<XML::LibXML::Element>).

  $cfg = new JAC::OCS::Config::Header( File => $file );
  $cfg = new JAC::OCS::Config::Header( XML => $xml );
  $cfg = new JAC::OCS::Config::Header( DOM => $dom );

The method will die if no arguments are supplied.

=cut

sub new {
  my $self = shift;

  # Now call base class with all the supplied options +
  # extra initialiser
  return $self->SUPER::new( @_, 
			    $JAC::OCS::Config::CfgBase::INITKEY => { 
								    ITEMS => [],
								   }
			  );
}

=back

=head2 Accessor Methods

=over 4

=item B<items>

Header items found in this configuration, in the order in which they
appear in the config file.

  @i = $h->items;
  $h->items( @i );

=cut

sub items {
  my $self = shift;
  if (@_) {
    @{$self->{ITEMS}} = @_;
  }
  return @{$self->{ITEMS}};
}

=item B<stringify>



=cut

sub stringify {
  my $self = shift;
  my %args = @_;

  my $xml = '';

  $xml .= "<HEADER_CONFIG>\n";

  for my $i ($self->items) {
    $xml .= "<HEADER TYPE=\"" . $i->type . "\"\n";
    $xml .= "        KEYWORD=\"" . $i->keyword . "\"\n";
    $xml .= "        VALUE=\"" . $i->value . "\" ";

    if ($i->source) {
      $xml .= ">\n";
      if ($i->source eq 'DRAMA') {
	$xml .= "<DRAMA_MONITOR ";
      } elsif ($i->source eq 'GLISH') {
	$xml .= "<GLISH_PARAMETER ";
      } else {
	croak "Unrecognized parameter source '".$i->source;
      }
      $xml .= "TASK=\"".$i->task."\" PARAM=\"".$i->param."\" ";
      $xml .= "EVENT=\"".$i->event."\"" if $i->event;
      $xml .= "/>\n";
      $xml .= "</HEADER>\n";
    } else {
      $xml .= "/>\n";
    }

  }


  $xml .= "</HEADER_CONFIG>\n";
  return ($args{NOINDENT} ? $xml : indent_xml_string( $xml ));
}

=back

=head2 General Methods

Need to add methods for locating items in the header
and for adding items into the header. Similar to Astro::FITS::Header
functionality.

=head2 Class Methods

=over 4

=item B<getRootElementName>

Return the name of the _CONFIG element that should be the root
node of the XML tree corresponding to the Header config.

 @names = $h->getRootElementName;

=cut

sub getRootElementName {
  return( "HEADER_CONFIG" );
}

=back

=begin __PRIVATE_METHODS__

=head2 Private Methods

=over 4

=item B<_process_dom>

Using the C<_rootnode> node referring to the top of the Header XML,
process the DOM tree and extract all the coordinate information.

 $self->_process_dom;

Populates the object with the extracted results.

=cut

sub _process_dom {
  my $self = shift;

  # Find all the header items
  my $el = $self->_rootnode;
  my @items = find_children( $el, "HEADER", min => 1 );

  my @obj;
  for my $i (@items) {
    my %attr = find_attr( $i, "TYPE","KEYWORD","COMMENT","VALUE");

    my @drama = find_children( $i, "DRAMA_MONITOR", min =>0, max=>1);
    my @glish = find_children( $i, "GLISH_PARAMETER", min =>0, max=>1);

    my %mon;
    if (@drama) {
      %mon = find_attr( $drama[0], "TASK", "PARAM", "EVENT");
      $mon{SOURCE} = "DRAMA";
    } elsif (@glish) {
      %mon = find_attr( $glish[0], "TASK", "PARAM", "EVENT");
      $mon{SOURCE} = "GLISH";
    }

    # Now create object representation
    push(@obj, new JAC::OCS::Config::Header::Item(
						  %attr,
						  %mon,
						 ));

  }

  $self->items( @obj );

  return;
}

=back

=end __PRIVATE_METHODS__

=head1 XML SPECIFICATION

The Header XML configuration specification is documented in OCS/ICD/011
with a DTD available at
L<http://www.jach.hawaii.edu/JACdocs/JCMT/OCS/ICD/011/headers.dtd>. A
schema is also available as part of the TOML definition used by the
JAC Observing Tool, but note that the XML dialects differ in their uses
even though they use the same low-level representation of an astronomical
target.

=head1 SEE ALSO

L<Astro::FITS::Header>.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

Copyright 2004 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

1;
